{
  "openapi": "3.0.0",
  "paths": {
    "/api/company/register": {
      "post": {
        "operationId": "CompanyController_register",
        "summary": "Register a new company.",
        "description": "This endpoint register a new company.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The registration details for the new company.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The company was successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "400": {
            "description": "A company with this description already exists"
          }
        },
        "tags": [
          "company"
        ]
      }
    },
    "/api/company/list": {
      "get": {
        "operationId": "CompanyController_list",
        "summary": "Get the list of companies",
        "description": "This endpoint get the list of companies",
        "parameters": [],
        "responses": {
          "302": {
            "description": "The list of companies was returned"
          }
        },
        "tags": [
          "company"
        ]
      }
    },
    "/api/company/{id}": {
      "get": {
        "operationId": "CompanyController_find",
        "summary": "Get a company",
        "description": "This endpoint get a company",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The company was succesfully founded"
          },
          "404": {
            "description": "Company not found"
          }
        },
        "tags": [
          "company"
        ]
      }
    },
    "/api/application/register": {
      "post": {
        "operationId": "ApplicationController_register",
        "summary": "Register a new application.",
        "description": "This endpoint register a new application.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The registration details for the new application.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The application was successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "A application with this code already exists"
          }
        },
        "tags": [
          "application"
        ]
      }
    },
    "/api/application/list": {
      "get": {
        "operationId": "ApplicationController_list",
        "summary": "Get the list of applications",
        "description": "This endpoint get the list of applications",
        "parameters": [],
        "responses": {
          "302": {
            "description": "The list of applications was returned"
          }
        },
        "tags": [
          "application"
        ]
      }
    },
    "/api/application/{id}": {
      "get": {
        "operationId": "ApplicationController_find",
        "summary": "Get a application",
        "description": "This endpoint get a application",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The application was succesfully founded"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "tags": [
          "application"
        ]
      }
    },
    "/api/application/tenant/db/register": {
      "post": {
        "operationId": "ApplicationTenantDBController_register",
        "summary": "Register a new application tenant db.",
        "description": "This endpoint register a new application tenant db.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The registration details for the new application tenant db.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The application tenant db was successfully registered."
          },
          "400": {
            "description": "A application tenant db like this already exists"
          }
        },
        "tags": [
          "application/tenant/db"
        ]
      }
    },
    "/api/application/tenant/db/list": {
      "get": {
        "operationId": "ApplicationTenantDBController_list",
        "summary": "Get the list of application tenant dbs",
        "description": "This endpoint get the list of application tenant dbs",
        "parameters": [],
        "responses": {
          "302": {
            "description": "The list of application tenant dbs was returned"
          }
        },
        "tags": [
          "application/tenant/db"
        ]
      }
    },
    "/api/application/tenant/db/{id}": {
      "get": {
        "operationId": "ApplicationTenantDBController_find",
        "summary": "Get a application tenant db",
        "description": "This endpoint get a application tenant db",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The application tenant db was succesfully founded"
          },
          "404": {
            "description": "Application tenant db not found"
          }
        },
        "tags": [
          "application/tenant/db"
        ]
      }
    },
    "/api/access-app/register": {
      "post": {
        "operationId": "AccessAppController_assign",
        "summary": "Assign application tenant db to user.",
        "description": "This endpoint assign an application tenant db to an user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The registration details for the new user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessAppDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The access app was successfully registered."
          },
          "400": {
            "description": "An access app like this already exists"
          }
        },
        "tags": [
          "access-app"
        ]
      }
    },
    "/api/access-app/list": {
      "get": {
        "operationId": "AccessAppController_list",
        "summary": "Get the list of access apps",
        "description": "This endpoint get the list of access apps",
        "parameters": [],
        "responses": {
          "302": {
            "description": "The list of access apps was returned"
          }
        },
        "tags": [
          "access-app"
        ]
      }
    },
    "/api/access-app/{id}": {
      "get": {
        "operationId": "AccessAppController_find",
        "summary": "Get an access app",
        "description": "This endpoint get an access app",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The access app was succesfully founded"
          },
          "404": {
            "description": "Access app not found"
          }
        },
        "tags": [
          "access-app"
        ]
      },
      "delete": {
        "operationId": "AccessAppController_delete",
        "summary": "Delete an access app",
        "description": "This endpoint delete an access app",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The access app was succesfully deleted"
          },
          "404": {
            "description": "Access app not found"
          }
        },
        "tags": [
          "access-app"
        ]
      }
    },
    "/api/access-app/can-access/{applicationCode}": {
      "get": {
        "operationId": "AccessAppController_findByUserIdAndApplicationCode",
        "summary": "Get an access app by application code and user id",
        "description": "This endpoint get an access app by application code and user id",
        "parameters": [
          {
            "name": "applicationCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "The access app was succesfully founded"
          },
          "404": {
            "description": "Access app not found"
          }
        },
        "tags": [
          "access-app"
        ]
      }
    },
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_profile",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "Login user and return access token.",
        "description": "This endpoint allows a user to login.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The user credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid credentials."
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "summary": "Register a new user.",
        "description": "This endpoint allows a new user to register.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The registration details for the new user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterBodyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully registered."
          },
          "400": {
            "description": "An user with this email already exists"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/password-reset/request": {
      "post": {
        "operationId": "PasswordResetController_requestReset",
        "summary": "Request a password reset token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestResetPasswordBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the email exists, reset instructions will be sent",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "If the email exists, reset instructions will be sent"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "password-reset"
        ]
      }
    },
    "/api/password-reset/reset": {
      "post": {
        "operationId": "PasswordResetController_resetPassword",
        "summary": "Reset password using token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your password has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Your password has been successfully updated"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "password-reset"
        ]
      }
    },
    "/api/user/list": {
      "get": {
        "operationId": "UserController_list",
        "summary": "Get the list of user.",
        "description": "This endpoint get the list of user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/user/{id}": {
      "get": {
        "operationId": "UserController_find",
        "summary": "Get a user.",
        "description": "This endpoint get a user.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was successfully found."
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/user/delete/{id}": {
      "delete": {
        "operationId": "UserController_delete",
        "summary": "Delete a user.",
        "description": "This endpoint delete a user.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The user was succesfully deleted."
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/user/is-active": {
      "patch": {
        "operationId": "UserController_disabled",
        "summary": "Set isActive a user",
        "description": "This endpoint set isActive in a user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IsActiveDTO"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The user was succesfully set in isActive"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "user"
        ]
      }
    }
  },
  "info": {
    "title": "Template Rest-API",
    "description": "",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "Company": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Unique identifier of the company.",
            "example": "Baron Pesi Srl"
          },
          "cell": {
            "type": "object",
            "description": "The cell of company.",
            "example": "123456789"
          },
          "cfpiva": {
            "type": "object",
            "description": "The CFPIVA of the company.",
            "example": "RSSMRA80E15H501"
          }
        },
        "required": [
          "description",
          "cell",
          "cfpiva"
        ]
      },
      "Application": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Unique identifier of the application.",
            "example": "App to manage all weighing datas"
          },
          "code": {
            "type": "string",
            "description": "The code of the application.",
            "example": "APP001"
          }
        },
        "required": [
          "description",
          "code"
        ]
      },
      "ApplicationFunctionalData": {
        "type": "object",
        "properties": {}
      },
      "AccessAppDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Id of user.",
            "example": "0992ac19-d670-46a7-a98c-b3bb2d8f3562"
          },
          "applicationTenantDBId": {
            "type": "string",
            "description": "Id of application tenant db.",
            "example": "0992ac19-d670-46a7-a98c-b3bb2d8f3562"
          },
          "role": {
            "type": "string",
            "description": "Role of user.",
            "example": "USER"
          },
          "applicationFunctionalData": {
            "description": "Application functional data",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationFunctionalData"
              }
            ]
          }
        },
        "required": [
          "userId",
          "applicationTenantDBId",
          "role",
          "applicationFunctionalData"
        ]
      },
      "LoginBodyDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's email address.",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "The user's password.",
            "example": "P@ssw0rd123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The access token for the user, used for authentication in subsequent requests.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "accessToken"
        ]
      },
      "RegisterBodyDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The user's first name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name.",
            "example": "Doe"
          },
          "picture": {
            "type": "string",
            "description": "URL to the user's profile picture.",
            "example": "https://example.com/profile.jpg"
          },
          "email": {
            "type": "string",
            "description": "The user's email address.",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password should be at least 8 characters, contain 1 letter, 1 number, and 1 special character.",
            "example": "P@ssw0rd123"
          },
          "companyId": {
            "type": "string",
            "description": " Id of company",
            "example": "0992ac19-d670-46a7-a98c-b3bb2d8f3562"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "password",
          "companyId"
        ]
      },
      "RequestResetPasswordBodyDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user requesting password reset",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordBodyDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user resetting the password",
            "example": "user@example.com"
          },
          "token": {
            "type": "string",
            "description": "Token sent to the user for password reset",
            "example": "abc123xyz"
          },
          "newPassword": {
            "type": "string",
            "description": "New password (min. 8 characters, 1 letter, 1 number, 1 special character)",
            "example": "Password@123"
          }
        },
        "required": [
          "email",
          "token",
          "newPassword"
        ]
      },
      "IsActiveDTO": {
        "type": "object",
        "properties": {}
      }
    }
  }
}